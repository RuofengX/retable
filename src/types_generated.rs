// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod base {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

/// 长度为1024字节的密码
// struct Secret, aligned to 1
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Secret(pub [u8; 1024]);
impl Default for Secret { 
  fn default() -> Self { 
    Self([0; 1024])
  }
}
impl core::fmt::Debug for Secret {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Secret")
      .field("value", &self.value())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Secret {}
impl<'a> flatbuffers::Follow<'a> for Secret {
  type Inner = &'a Secret;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Secret>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Secret {
  type Inner = &'a Secret;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Secret>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Secret {
    type Output = Secret;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Secret as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Secret {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Secret {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    value: &[i8; 1024],
  ) -> Self {
    let mut s = Self([0; 1024]);
    s.set_value(value);
    s
  }

  pub fn value(&'a self) -> flatbuffers::Array<'a, i8, 1024> {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid array in this slot
    unsafe { flatbuffers::Array::follow(&self.0, 0) }
  }

  pub fn set_value(&mut self, items: &[i8; 1024]) {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid array in this slot
    unsafe { flatbuffers::emplace_scalar_array(&mut self.0, 0, items) };
  }

}

/// float64的三维数组
// struct F64V, aligned to 8
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct F64V(pub [u8; 24]);
impl Default for F64V { 
  fn default() -> Self { 
    Self([0; 24])
  }
}
impl core::fmt::Debug for F64V {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("F64V")
      .field("x", &self.x())
      .field("y", &self.y())
      .field("z", &self.z())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for F64V {}
impl<'a> flatbuffers::Follow<'a> for F64V {
  type Inner = &'a F64V;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a F64V>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a F64V {
  type Inner = &'a F64V;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<F64V>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for F64V {
    type Output = F64V;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const F64V as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for F64V {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> F64V {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    x: f64,
    y: f64,
    z: f64,
  ) -> Self {
    let mut s = Self([0; 24]);
    s.set_x(x);
    s.set_y(y);
    s.set_z(z);
    s
  }

  pub fn x(&self) -> f64 {
    let mut mem = core::mem::MaybeUninit::<<f64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_x(&mut self, x: f64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn y(&self) -> f64 {
    let mut mem = core::mem::MaybeUninit::<<f64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_y(&mut self, x: f64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn z(&self) -> f64 {
    let mut mem = core::mem::MaybeUninit::<<f64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[16..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_z(&mut self, x: f64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[16..].as_mut_ptr(),
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
    }
  }

}

/// i64的三维数组
// struct I64V, aligned to 8
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct I64V(pub [u8; 24]);
impl Default for I64V { 
  fn default() -> Self { 
    Self([0; 24])
  }
}
impl core::fmt::Debug for I64V {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("I64V")
      .field("x", &self.x())
      .field("y", &self.y())
      .field("z", &self.z())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for I64V {}
impl<'a> flatbuffers::Follow<'a> for I64V {
  type Inner = &'a I64V;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a I64V>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a I64V {
  type Inner = &'a I64V;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<I64V>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for I64V {
    type Output = I64V;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const I64V as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for I64V {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> I64V {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    x: i64,
    y: i64,
    z: i64,
  ) -> Self {
    let mut s = Self([0; 24]);
    s.set_x(x);
    s.set_y(y);
    s.set_z(z);
    s
  }

  pub fn x(&self) -> i64 {
    let mut mem = core::mem::MaybeUninit::<<i64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<i64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_x(&mut self, x: i64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<i64 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn y(&self) -> i64 {
    let mut mem = core::mem::MaybeUninit::<<i64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<i64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_y(&mut self, x: i64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<<i64 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn z(&self) -> i64 {
    let mut mem = core::mem::MaybeUninit::<<i64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[16..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<i64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_z(&mut self, x: i64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[16..].as_mut_ptr(),
        core::mem::size_of::<<i64 as EndianScalar>::Scalar>(),
      );
    }
  }

}

/// Wrapper for float64
// struct F64, aligned to 8
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct F64(pub [u8; 8]);
impl Default for F64 { 
  fn default() -> Self { 
    Self([0; 8])
  }
}
impl core::fmt::Debug for F64 {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("F64")
      .field("value", &self.value())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for F64 {}
impl<'a> flatbuffers::Follow<'a> for F64 {
  type Inner = &'a F64;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a F64>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a F64 {
  type Inner = &'a F64;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<F64>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for F64 {
    type Output = F64;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const F64 as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for F64 {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> F64 {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    value: f64,
  ) -> Self {
    let mut s = Self([0; 8]);
    s.set_value(value);
    s
  }

  pub fn value(&self) -> f64 {
    let mut mem = core::mem::MaybeUninit::<<f64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_value(&mut self, x: f64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
    }
  }

}

/// Wrapper for u64
// struct U64, aligned to 8
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct U64(pub [u8; 8]);
impl Default for U64 { 
  fn default() -> Self { 
    Self([0; 8])
  }
}
impl core::fmt::Debug for U64 {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("U64")
      .field("value", &self.value())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for U64 {}
impl<'a> flatbuffers::Follow<'a> for U64 {
  type Inner = &'a U64;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a U64>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a U64 {
  type Inner = &'a U64;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<U64>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for U64 {
    type Output = U64;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const U64 as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for U64 {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> U64 {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    value: u64,
  ) -> Self {
    let mut s = Self([0; 8]);
    s.set_value(value);
    s
  }

  pub fn value(&self) -> u64 {
    let mut mem = core::mem::MaybeUninit::<<u64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_value(&mut self, x: u64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<u64 as EndianScalar>::Scalar>(),
      );
    }
  }

}

/// 实体ID
// struct EID, aligned to 8
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct EID(pub [u8; 8]);
impl Default for EID { 
  fn default() -> Self { 
    Self([0; 8])
  }
}
impl core::fmt::Debug for EID {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("EID")
      .field("value", &self.value())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for EID {}
impl<'a> flatbuffers::Follow<'a> for EID {
  type Inner = &'a EID;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a EID>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a EID {
  type Inner = &'a EID;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<EID>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for EID {
    type Output = EID;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const EID as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for EID {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> EID {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    value: u64,
  ) -> Self {
    let mut s = Self([0; 8]);
    s.set_value(value);
    s
  }

  pub fn value(&self) -> u64 {
    let mut mem = core::mem::MaybeUninit::<<u64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_value(&mut self, x: u64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<u64 as EndianScalar>::Scalar>(),
      );
    }
  }

}

}  // pub mod Base

#[allow(unused_imports, dead_code)]
pub mod storage {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_PROP_VALUE: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_PROP_VALUE: u8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_PROP_VALUE: [PropValue; 4] = [
  PropValue::NONE,
  PropValue::info,
  PropValue::space,
  PropValue::newton,
];

/// 以属性类型为索引的属性值
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct PropValue(pub u8);
#[allow(non_upper_case_globals)]
impl PropValue {
  pub const NONE: Self = Self(0);
  pub const info: Self = Self(1);
  pub const space: Self = Self(2);
  pub const newton: Self = Self(3);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::info,
    Self::space,
    Self::newton,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::info => Some("info"),
      Self::space => Some("space"),
      Self::newton => Some("newton"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for PropValue {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for PropValue {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for PropValue {
    type Output = PropValue;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for PropValue {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for PropValue {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for PropValue {}
pub struct PropValueUnionTableOffset {}

pub enum AtomDataOffset {}
#[derive(Copy, Clone, PartialEq)]

/// 属性
pub struct AtomData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AtomData<'a> {
  type Inner = AtomData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AtomData<'a> {
  pub const VT_SYSTEM: flatbuffers::VOffsetT = 4;
  pub const VT_VALUE_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_VALUE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AtomData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args AtomDataArgs<'args>
  ) -> flatbuffers::WIPOffset<AtomData<'bldr>> {
    let mut builder = AtomDataBuilder::new(_fbb);
    if let Some(x) = args.value { builder.add_value(x); }
    if let Some(x) = args.system { builder.add_system(x); }
    builder.add_value_type(args.value_type);
    builder.finish()
  }


  #[inline]
  pub fn system(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AtomData::VT_SYSTEM, None)}
  }
  #[inline]
  pub fn value_type(&self) -> PropValue {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PropValue>(AtomData::VT_VALUE_TYPE, Some(PropValue::NONE)).unwrap()}
  }
  #[inline]
  pub fn value(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(AtomData::VT_VALUE, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn value_as_info(&self) -> Option<InfoSchema<'a>> {
    if self.value_type() == PropValue::info {
      self.value().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { InfoSchema::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn value_as_space(&self) -> Option<SpaceSchema<'a>> {
    if self.value_type() == PropValue::space {
      self.value().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { SpaceSchema::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn value_as_newton(&self) -> Option<NewtonSchema<'a>> {
    if self.value_type() == PropValue::newton {
      self.value().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { NewtonSchema::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for AtomData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("system", Self::VT_SYSTEM, false)?
     .visit_union::<PropValue, _>("value_type", Self::VT_VALUE_TYPE, "value", Self::VT_VALUE, false, |key, v, pos| {
        match key {
          PropValue::info => v.verify_union_variant::<flatbuffers::ForwardsUOffset<InfoSchema>>("PropValue::info", pos),
          PropValue::space => v.verify_union_variant::<flatbuffers::ForwardsUOffset<SpaceSchema>>("PropValue::space", pos),
          PropValue::newton => v.verify_union_variant::<flatbuffers::ForwardsUOffset<NewtonSchema>>("PropValue::newton", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct AtomDataArgs<'a> {
    pub system: Option<flatbuffers::WIPOffset<&'a str>>,
    pub value_type: PropValue,
    pub value: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for AtomDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    AtomDataArgs {
      system: None,
      value_type: PropValue::NONE,
      value: None,
    }
  }
}

pub struct AtomDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AtomDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_system(&mut self, system: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AtomData::VT_SYSTEM, system);
  }
  #[inline]
  pub fn add_value_type(&mut self, value_type: PropValue) {
    self.fbb_.push_slot::<PropValue>(AtomData::VT_VALUE_TYPE, value_type, PropValue::NONE);
  }
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AtomData::VT_VALUE, value);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AtomDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AtomDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AtomData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AtomData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AtomData");
      ds.field("system", &self.system());
      ds.field("value_type", &self.value_type());
      match self.value_type() {
        PropValue::info => {
          if let Some(x) = self.value_as_info() {
            ds.field("value", &x)
          } else {
            ds.field("value", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        PropValue::space => {
          if let Some(x) = self.value_as_space() {
            ds.field("value", &x)
          } else {
            ds.field("value", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        PropValue::newton => {
          if let Some(x) = self.value_as_newton() {
            ds.field("value", &x)
          } else {
            ds.field("value", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("value", &x)
        },
      };
      ds.finish()
  }
}
pub enum InfoSchemaOffset {}
#[derive(Copy, Clone, PartialEq)]

/// 信息属性系统
pub struct InfoSchema<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for InfoSchema<'a> {
  type Inner = InfoSchema<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> InfoSchema<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_EMAIL: flatbuffers::VOffsetT = 6;
  pub const VT_PASSWORD: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    InfoSchema { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args InfoSchemaArgs<'args>
  ) -> flatbuffers::WIPOffset<InfoSchema<'bldr>> {
    let mut builder = InfoSchemaBuilder::new(_fbb);
    if let Some(x) = args.password { builder.add_password(x); }
    if let Some(x) = args.email { builder.add_email(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(InfoSchema::VT_NAME, None)}
  }
  #[inline]
  pub fn email(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(InfoSchema::VT_EMAIL, None)}
  }
  #[inline]
  pub fn password(&self) -> Option<&'a super::base::Secret> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<super::base::Secret>(InfoSchema::VT_PASSWORD, None)}
  }
}

impl flatbuffers::Verifiable for InfoSchema<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("email", Self::VT_EMAIL, false)?
     .visit_field::<super::base::Secret>("password", Self::VT_PASSWORD, false)?
     .finish();
    Ok(())
  }
}
pub struct InfoSchemaArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub email: Option<flatbuffers::WIPOffset<&'a str>>,
    pub password: Option<&'a super::base::Secret>,
}
impl<'a> Default for InfoSchemaArgs<'a> {
  #[inline]
  fn default() -> Self {
    InfoSchemaArgs {
      name: None,
      email: None,
      password: None,
    }
  }
}

pub struct InfoSchemaBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> InfoSchemaBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(InfoSchema::VT_NAME, name);
  }
  #[inline]
  pub fn add_email(&mut self, email: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(InfoSchema::VT_EMAIL, email);
  }
  #[inline]
  pub fn add_password(&mut self, password: &super::base::Secret) {
    self.fbb_.push_slot_always::<&super::base::Secret>(InfoSchema::VT_PASSWORD, password);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> InfoSchemaBuilder<'a, 'b> {
    let start = _fbb.start_table();
    InfoSchemaBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<InfoSchema<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for InfoSchema<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("InfoSchema");
      ds.field("name", &self.name());
      ds.field("email", &self.email());
      ds.field("password", &self.password());
      ds.finish()
  }
}
pub enum SpaceSchemaOffset {}
#[derive(Copy, Clone, PartialEq)]

/// 空间系统
pub struct SpaceSchema<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SpaceSchema<'a> {
  type Inner = SpaceSchema<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SpaceSchema<'a> {
  pub const VT_GRID: flatbuffers::VOffsetT = 4;
  pub const VT_POS: flatbuffers::VOffsetT = 6;
  pub const VT_VELO: flatbuffers::VOffsetT = 8;
  pub const VT_ACC: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SpaceSchema { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args SpaceSchemaArgs<'args>
  ) -> flatbuffers::WIPOffset<SpaceSchema<'bldr>> {
    let mut builder = SpaceSchemaBuilder::new(_fbb);
    if let Some(x) = args.acc { builder.add_acc(x); }
    if let Some(x) = args.velo { builder.add_velo(x); }
    if let Some(x) = args.pos { builder.add_pos(x); }
    if let Some(x) = args.grid { builder.add_grid(x); }
    builder.finish()
  }


  /// 所属网格
  #[inline]
  pub fn grid(&self) -> Option<&'a super::base::I64V> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<super::base::I64V>(SpaceSchema::VT_GRID, None)}
  }
  /// 位置
  #[inline]
  pub fn pos(&self) -> Option<&'a super::base::F64V> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<super::base::F64V>(SpaceSchema::VT_POS, None)}
  }
  /// 速度
  #[inline]
  pub fn velo(&self) -> Option<&'a super::base::F64V> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<super::base::F64V>(SpaceSchema::VT_VELO, None)}
  }
  /// 加速度
  #[inline]
  pub fn acc(&self) -> Option<&'a super::base::F64V> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<super::base::F64V>(SpaceSchema::VT_ACC, None)}
  }
}

impl flatbuffers::Verifiable for SpaceSchema<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<super::base::I64V>("grid", Self::VT_GRID, false)?
     .visit_field::<super::base::F64V>("pos", Self::VT_POS, false)?
     .visit_field::<super::base::F64V>("velo", Self::VT_VELO, false)?
     .visit_field::<super::base::F64V>("acc", Self::VT_ACC, false)?
     .finish();
    Ok(())
  }
}
pub struct SpaceSchemaArgs<'a> {
    pub grid: Option<&'a super::base::I64V>,
    pub pos: Option<&'a super::base::F64V>,
    pub velo: Option<&'a super::base::F64V>,
    pub acc: Option<&'a super::base::F64V>,
}
impl<'a> Default for SpaceSchemaArgs<'a> {
  #[inline]
  fn default() -> Self {
    SpaceSchemaArgs {
      grid: None,
      pos: None,
      velo: None,
      acc: None,
    }
  }
}

pub struct SpaceSchemaBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SpaceSchemaBuilder<'a, 'b> {
  #[inline]
  pub fn add_grid(&mut self, grid: &super::base::I64V) {
    self.fbb_.push_slot_always::<&super::base::I64V>(SpaceSchema::VT_GRID, grid);
  }
  #[inline]
  pub fn add_pos(&mut self, pos: &super::base::F64V) {
    self.fbb_.push_slot_always::<&super::base::F64V>(SpaceSchema::VT_POS, pos);
  }
  #[inline]
  pub fn add_velo(&mut self, velo: &super::base::F64V) {
    self.fbb_.push_slot_always::<&super::base::F64V>(SpaceSchema::VT_VELO, velo);
  }
  #[inline]
  pub fn add_acc(&mut self, acc: &super::base::F64V) {
    self.fbb_.push_slot_always::<&super::base::F64V>(SpaceSchema::VT_ACC, acc);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SpaceSchemaBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SpaceSchemaBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SpaceSchema<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SpaceSchema<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SpaceSchema");
      ds.field("grid", &self.grid());
      ds.field("pos", &self.pos());
      ds.field("velo", &self.velo());
      ds.field("acc", &self.acc());
      ds.finish()
  }
}
pub enum NewtonSchemaOffset {}
#[derive(Copy, Clone, PartialEq)]

/// 经典力学系统
/// 通过向Space系统传递计算出的加速度（后重置forces）来达到力推动物体的效果
pub struct NewtonSchema<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for NewtonSchema<'a> {
  type Inner = NewtonSchema<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> NewtonSchema<'a> {
  pub const VT_MASS: flatbuffers::VOffsetT = 4;
  pub const VT_FORCE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    NewtonSchema { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args NewtonSchemaArgs<'args>
  ) -> flatbuffers::WIPOffset<NewtonSchema<'bldr>> {
    let mut builder = NewtonSchemaBuilder::new(_fbb);
    if let Some(x) = args.force { builder.add_force(x); }
    if let Some(x) = args.mass { builder.add_mass(x); }
    builder.finish()
  }


  /// 质量 
  #[inline]
  pub fn mass(&self) -> Option<&'a super::base::F64> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<super::base::F64>(NewtonSchema::VT_MASS, None)}
  }
  /// 受力
  #[inline]
  pub fn force(&self) -> Option<&'a super::base::F64V> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<super::base::F64V>(NewtonSchema::VT_FORCE, None)}
  }
}

impl flatbuffers::Verifiable for NewtonSchema<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<super::base::F64>("mass", Self::VT_MASS, false)?
     .visit_field::<super::base::F64V>("force", Self::VT_FORCE, false)?
     .finish();
    Ok(())
  }
}
pub struct NewtonSchemaArgs<'a> {
    pub mass: Option<&'a super::base::F64>,
    pub force: Option<&'a super::base::F64V>,
}
impl<'a> Default for NewtonSchemaArgs<'a> {
  #[inline]
  fn default() -> Self {
    NewtonSchemaArgs {
      mass: None,
      force: None,
    }
  }
}

pub struct NewtonSchemaBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> NewtonSchemaBuilder<'a, 'b> {
  #[inline]
  pub fn add_mass(&mut self, mass: &super::base::F64) {
    self.fbb_.push_slot_always::<&super::base::F64>(NewtonSchema::VT_MASS, mass);
  }
  #[inline]
  pub fn add_force(&mut self, force: &super::base::F64V) {
    self.fbb_.push_slot_always::<&super::base::F64V>(NewtonSchema::VT_FORCE, force);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> NewtonSchemaBuilder<'a, 'b> {
    let start = _fbb.start_table();
    NewtonSchemaBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<NewtonSchema<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for NewtonSchema<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("NewtonSchema");
      ds.field("mass", &self.mass());
      ds.field("force", &self.force());
      ds.finish()
  }
}
}  // pub mod Storage

#[allow(unused_imports, dead_code)]
pub mod atom {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum AtomOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Atom原子化的记录条目
/// 大致如下：
/// ```rs
/// <----------ATOM-----------> Data-layer
/// eid + prop_name + prop_value 
///       <-----AtomData------> Storage-layer
/// ```
/// Atom记录在eid和prop_name上双索引
/// 且prop_value在内存上连续
pub struct Atom<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Atom<'a> {
  type Inner = Atom<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Atom<'a> {
  pub const VT_EID: flatbuffers::VOffsetT = 4;
  pub const VT_VALUE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Atom { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args AtomArgs<'args>
  ) -> flatbuffers::WIPOffset<Atom<'bldr>> {
    let mut builder = AtomBuilder::new(_fbb);
    if let Some(x) = args.value { builder.add_value(x); }
    if let Some(x) = args.eid { builder.add_eid(x); }
    builder.finish()
  }


  #[inline]
  pub fn eid(&self) -> Option<&'a super::base::EID> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<super::base::EID>(Atom::VT_EID, None)}
  }
  #[inline]
  pub fn value(&self) -> Option<super::storage::AtomData<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::storage::AtomData>>(Atom::VT_VALUE, None)}
  }
}

impl flatbuffers::Verifiable for Atom<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<super::base::EID>("eid", Self::VT_EID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::storage::AtomData>>("value", Self::VT_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct AtomArgs<'a> {
    pub eid: Option<&'a super::base::EID>,
    pub value: Option<flatbuffers::WIPOffset<super::storage::AtomData<'a>>>,
}
impl<'a> Default for AtomArgs<'a> {
  #[inline]
  fn default() -> Self {
    AtomArgs {
      eid: None,
      value: None,
    }
  }
}

pub struct AtomBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AtomBuilder<'a, 'b> {
  #[inline]
  pub fn add_eid(&mut self, eid: &super::base::EID) {
    self.fbb_.push_slot_always::<&super::base::EID>(Atom::VT_EID, eid);
  }
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<super::storage::AtomData<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::storage::AtomData>>(Atom::VT_VALUE, value);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AtomBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AtomBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Atom<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Atom<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Atom");
      ds.field("eid", &self.eid());
      ds.field("value", &self.value());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Atom`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_atom_unchecked`.
pub fn root_as_atom(buf: &[u8]) -> Result<Atom, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Atom>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Atom` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_atom_unchecked`.
pub fn size_prefixed_root_as_atom(buf: &[u8]) -> Result<Atom, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Atom>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Atom` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_atom_unchecked`.
pub fn root_as_atom_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Atom<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Atom<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Atom` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_atom_unchecked`.
pub fn size_prefixed_root_as_atom_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Atom<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Atom<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Atom and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Atom`.
pub unsafe fn root_as_atom_unchecked(buf: &[u8]) -> Atom {
  flatbuffers::root_unchecked::<Atom>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Atom and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Atom`.
pub unsafe fn size_prefixed_root_as_atom_unchecked(buf: &[u8]) -> Atom {
  flatbuffers::size_prefixed_root_unchecked::<Atom>(buf)
}
#[inline]
pub fn finish_atom_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Atom<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_atom_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Atom<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Atom

